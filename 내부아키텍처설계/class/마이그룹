=== Version1
@startuml
package com.subride.mygroup {
  package biz {
    package usecase {
      package inport {
        interface IMessageService {
          + MessageInfoDTO getMessage(String msgId)
          + void createMessage(MessageCreateDTO messageCreateDTO)
          + void updateMessage(MessageUpdateDTO messageUpdateDTO)
          + void deleteMessage(String msgId)
        }
        interface IMyGroupService {
          + MyGroupInfoDTO getMyGroupInfo(String userId)
          + List<MyGroupSummaryDTO> getMyGroupSummaryList(String userId)
          + MyGroupDetailDTO getMyGroupDetail(Long myGroupId)
          + void createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
          + void joinMyGroup(MyGroupJoinDTO myGroupJoinDTO)
          + void leaveMyGroup(Long myGroupId, String userId)
        }
      }
      package outport {
        interface IMessageProvider {
          + Message getMessage(String msgId)
          + void saveMessage(Message message)
          + void updateMessage(Message message) 
          + void deleteMessage(String msgId)
        }
        interface IMyGroupProvider {
          + MyGroup getMyGroupByMyGroupId(Long myGroupId)  
          + List<MyGroup> getMyGroupListByUserId(String userId)
          + boolean existsByMyGroupIdAndUserId(Long myGroupId, String userId)
          + void saveMyGroup(MyGroup myGroup)
          + void deleteMyGroupUser(Long myGroupId, String userId)
        }
      }
      package service {
        class MessageServiceImpl {
          - IMessageProvider messageProvider
          + MessageInfoDTO getMessage(String msgId)
          + void createMessage(MessageCreateDTO messageCreateDTO)  
          + void updateMessage(MessageUpdateDTO messageUpdateDTO)
          + void deleteMessage(String msgId)
        }
        class MyGroupServiceImpl {
          - IMyGroupProvider myGroupProvider
          + MyGroupInfoDTO getMyGroupInfo(String userId)  
          + List<MyGroupSummaryDTO> getMyGroupSummaryList(String userId)
          + MyGroupDetailDTO getMyGroupDetail(Long myGroupId)
          + void createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
          + void joinMyGroup(MyGroupJoinDTO myGroupJoinDTO) 
          + void leaveMyGroup(Long myGroupId, String userId)
        }
      }
    }
    package domain {
      class Message {
        - String msgId
        - String content
        - String sender
        - String receiver
        - LocalDateTime sentAt
      }
      class MyGroup {
        - Long myGroupId
        - String myGroupName
        - String subId
        - String leaderId 
        - Set<String> memberIds
        - Account leaderAccount
        - int paymentDay
        - String inviteCode
      }
    }
    package dto {
      class MessageInfoDTO {
        - String msgId  
        - String content
        - String sender
        - String receiver 
        - LocalDateTime sentAt
      }
      class MessageCreateDTO {
        - String content
        - String receiver
      }
      class MessageUpdateDTO {
        - String msgId
        - String content
      }
      class MyGroupInfoDTO {
        - String myGroupName
        - String subName
        - int paymentDay
        - Long totalAmount
        - Long discountedAmount
      }
      class MyGroupSummaryDTO {
        - Long myGroupId
        - String subLogoUrl
        - String myGroupName
        - Long discountedAmount  
      }
      class MyGroupDetailDTO {
        - String myGroupName
        - String subLogoUrl
        - String subName
        - String description
        - String leaderName
        - Account leaderAccount  
        - int paymentDay
        - int memberCount
        - int maxMemberCount
        - String inviteCode
        - List<MyGroupUserDTO> members
      }
      class MyGroupUserDTO {
        - String userId
        - String userName
      }
      class MyGroupCreateDTO {
        - String myGroupName
        - Long subId
        - int paymentDay
      }
      class MyGroupJoinDTO {  
        - String inviteCode
      }
    }
    package exception {
      class BizException extends RuntimeException {
        + BizException(String message)
        + BizException(String message, Throwable cause)
      }
    }
  }
  
  package infra {
    package in.web {
      class MessageController {
        - MessageServiceImpl messageService
        - MessageControllerHelper controllerHelper  
        + ResponseEntity<ResponseDTO<MessageInfoDTO>> getMessage(String msgId)
        + ResponseEntity<ResponseDTO<Void>> createMessage(MessageCreateDTO messageCreateDTO)
        + ResponseEntity<ResponseDTO<Void>> updateMessage(MessageUpdateDTO messageUpdateDTO) 
        + ResponseEntity<ResponseDTO<Void>> deleteMessage(String msgId)  
      }
      class MessageControllerHelper {
        + MessageInfoDTO toMessageInfoDTO(Message message)
        + Message toMessage(MessageCreateDTO messageCreateDTO)
      }
      class MyGroupController {  
        - MyGroupServiceImpl myGroupService
        - MyGroupControllerHelper controllerHelper
        + ResponseEntity<ResponseDTO<MyGroupInfoDTO>> getMyGroupInfo(String userId)
        + ResponseEntity<ResponseDTO<List<MyGroupSummaryDTO>>> getMyGroupList(String userId)
        + ResponseEntity<ResponseDTO<MyGroupDetailDTO>> getMyGroupDetail(Long myGroupId)
        + ResponseEntity<ResponseDTO<Void>> createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
        + ResponseEntity<ResponseDTO<Void>> joinMyGroup(MyGroupJoinDTO myGroupJoinDTO)
        + ResponseEntity<ResponseDTO<Void>> leaveMyGroup(Long myGroupId)
      }
      class MyGroupControllerHelper {
        - ISubProvider subProvider
        + MyGroup toMyGroup(MyGroupCreateDTO myGroupCreateDTO) 
        + MyGroupInfoDTO toMyGroupInfoDTO(MyGroup myGroup)
        + List<MyGroupSummaryDTO> toMyGroupSummaryDTOList(List<MyGroup> myGroupList)
        + MyGroupDetailDTO toMyGroupDetailDTO(MyGroup myGroup) 
      }
    }
    
    package out.repo {
      interface IMessageRepository extends JpaRepository<MessageEntity, String> {
      }
      
      interface IMyGroupRepository extends JpaRepository<MyGroupEntity, Long> {
        + List<MyGroupEntity> findByMemberIdsContaining(String userId);
        + boolean existsByMyGroupIdAndMemberIdsContaining(Long myGroupId, String userId);
        + void deleteById(Long id);
      }
    }
    
    package out.adapter {
      class MessageProviderImpl implements IMessageProvider {
        - IMessageRepository messageRepository
        + Message getMessage(String msgId)
        + void saveMessage(Message message)
        + void updateMessage(Message message)
        + void deleteMessage(String msgId) 
      }
      
      class MyGroupProviderImpl implements IMyGroupProvider {
        - IMyGroupRepository myGroupRepository  
        + MyGroup getMyGroupByMyGroupId(Long myGroupId)
        + List<MyGroup> getMyGroupListByUserId(String userId)
        + boolean existsByMyGroupIdAndUserId(Long myGroupId, String userId)
        + void saveMyGroup(MyGroup myGroup)
        + void deleteMyGroupUser(Long myGroupId, String userId)
      }
    }
    
    package out.entity {
      class MessageEntity {
        - String msgId
        - String content 
        - String sender
        - String receiver
        - LocalDateTime sentAt
        + Message toDomain()
        + static MessageEntity fromDomain(Message message)
      }
      
      class MyGroupEntity {
        - Long myGroupId 
        - String myGroupName
        - String subId
        - String leaderId
        - Set<String> memberIds
        - String leaderAccountInfo
        - int paymentDay
        - String inviteCode
        + MyGroup toDomain()
        + static MyGroupEntity fromDomain(MyGroup myGroup)
      }
    }
    
    package common.config {
      class LoggingAspect {
        + void logMethodStart(JoinPoint joinPoint)
        + void logMethodEnd(JoinPoint joinPoint, Object result) 
        + void logMethodException(JoinPoint joinPoint, Exception exception)
      }
      
      class SpringDocConfig {
        + OpenAPI openAPI()
      }
    }
    
    package dto {
      class PaymentInfoDTO {
        - Long amount
        - LocalDate paymentDay
        - String bankName
        - String accountNumber
      }
      
      class SubInfoDTO {
        - Long subId
        - String subName 
        - String logoUrl
        - Long originalFee
        - int maxMemberCount
      }
    }
    
    package exception {
      class InfraException extends RuntimeException {
        - int code
        + InfraException(String message)
        + InfraException(String message, Throwable cause)  
        + InfraException(int code, String message)
        + InfraException(int code, String message, Throwable cause)
        + int getCode()
      }
    }
  }
}
@enduml

================================


- Controller 클래스가 참조하는 Service클래스명은 구현체가 아니라 인터페이스여야 함
예를 들어 MyGroupServiceImpl myGroupService은 IMyGroupService myGroupService으로 수정해야 함
- MyGroupController에서 getMyGroupInfo 제거 

- infra.common.config 클래스는 제외할 것
- biz.dto의 MyGroupInfoDTO을 없애고 대신에 MyGroupSummaryDTO를 사용함. 필드는 myGroupName, subName, logo, paymentDay, Fee, discountedFee로 할 것
- biz.dto에 SubInfoDTO추가하고 Long subId, String subName, String categoryName, String logo, String description. Long fee, int maxShareNum으로 구성
- biz.dto에 MemberInfoDTO추가하고 String userId, String userName, int characterId로 구성
- MyGroupDetailDTO는 Long myGroupId, String myGroupName, String inviteCode, int paymentDay, int memberCount, int maxMemberCount, String bankName, String bankAccount, SubInfoDTO subInfo, MemberInfoDTO leaderInfo, List<MemberInfoDTO> members으로 구성
- MyGroupEntity의 leaderAccountInfo는 bankAccount로 이름 변경. String bankName추가 
- MyGroupCreateDTO는 infra.dto로 옮기고, myGroupName, subId, leaderId, bankName, bankAccount, paymentDay으로 구성
- biz.domain의 MyGroup은 Long myGroupId, String myGroupName, String subId, String leaderId, String bankName, String bankAccount, String inviteCode, int paymentDay, Set<String> memberIds로 구성
- MyGroupJoinDTO도 infra.dto로 옮길것
- 'Message'로 시작하는 모든 클래스는 제거할 것. 이체조회 서비스에 필요함 

==============================

@startuml
package com.subride.mygroup {
  package biz {
    package usecase {
      package inport {
        interface IMyGroupService {
          + List<MyGroupSummaryDTO> getMyGroupSummaryList(String userId)
          + MyGroupDetailDTO getMyGroupDetail(Long myGroupId)
          + void createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
          + void joinMyGroup(MyGroupJoinDTO myGroupJoinDTO)
          + void leaveMyGroup(Long myGroupId, String userId)
        }
      }
      package outport {
        interface IMyGroupProvider {
          + MyGroup getMyGroupByMyGroupId(Long myGroupId)  
          + List<MyGroup> getMyGroupListByUserId(String userId)
          + boolean existsByMyGroupIdAndUserId(Long myGroupId, String userId)
          + void saveMyGroup(MyGroup myGroup)
          + void deleteMyGroupUser(Long myGroupId, String userId)
        }
      }
      package service {
        class MyGroupServiceImpl {
          - IMyGroupProvider myGroupProvider
          + List<MyGroupSummaryDTO> getMyGroupSummaryList(String userId)
          + MyGroupDetailDTO getMyGroupDetail(Long myGroupId)
          + void createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
          + void joinMyGroup(MyGroupJoinDTO myGroupJoinDTO) 
          + void leaveMyGroup(Long myGroupId, String userId)
        }
      }
    }
    package domain {
      class MyGroup {
        - Long myGroupId
        - String myGroupName
        - String subId
        - String leaderId
        - String bankName
        - String bankAccount
        - String inviteCode
        - int paymentDay
        - Set<String> memberIds
      }
    }
    package dto {
      class MyGroupSummaryDTO {
        - Long myGroupId
        - String myGroupName
        - String subName
        - String logo
        - int paymentDay 
        - Long fee
        - Long discountedFee
      }
      class MyGroupDetailDTO {
        - Long myGroupId  
        - String myGroupName
        - String inviteCode
        - int paymentDay
        - int memberCount
        - int maxMemberCount
        - String bankName
        - String bankAccount
        - SubInfoDTO subInfo
        - MemberInfoDTO leaderInfo
        - List<MemberInfoDTO> members
      }
      class SubInfoDTO {
        - Long subId
        - String subName
        - String categoryName
        - String logo
        - String description
        - Long fee
        - int maxShareNum
      }
      class MemberInfoDTO {
        - String userId
        - String userName
        - int characterId
      }
    }
    package exception {
      class BizException extends RuntimeException {
        + BizException(String message)
        + BizException(String message, Throwable cause)
      }
    }
  }
  
  package infra {
    package in.web {
      class MyGroupController {  
        - IMyGroupService myGroupService
        - MyGroupControllerHelper controllerHelper
        + ResponseEntity<ResponseDTO<List<MyGroupSummaryDTO>>> getMyGroupList(String userId)
        + ResponseEntity<ResponseDTO<MyGroupDetailDTO>> getMyGroupDetail(Long myGroupId)
        + ResponseEntity<ResponseDTO<Void>> createMyGroup(MyGroupCreateDTO myGroupCreateDTO)
        + ResponseEntity<ResponseDTO<Void>> joinMyGroup(MyGroupJoinDTO myGroupJoinDTO)
        + ResponseEntity<ResponseDTO<Void>> leaveMyGroup(Long myGroupId)
      }
      class MyGroupControllerHelper {
        - ISubProvider subProvider
        + MyGroup toMyGroup(MyGroupCreateDTO myGroupCreateDTO) 
        + List<MyGroupSummaryDTO> toMyGroupSummaryDTOList(List<MyGroup> myGroupList)
        + MyGroupDetailDTO toMyGroupDetailDTO(MyGroup myGroup) 
      }
    }
    
    package out.repo {
      interface IMyGroupRepository extends JpaRepository<MyGroupEntity, Long> {
        + List<MyGroupEntity> findByMemberIdsContaining(String userId);
        + boolean existsByMyGroupIdAndMemberIdsContaining(Long myGroupId, String userId);
        + void deleteById(Long id);
      }
    }
    
    package out.adapter {
      class MyGroupProviderImpl implements IMyGroupProvider {
        - IMyGroupRepository myGroupRepository  
        + MyGroup getMyGroupByMyGroupId(Long myGroupId)
        + List<MyGroup> getMyGroupListByUserId(String userId)
        + boolean existsByMyGroupIdAndUserId(Long myGroupId, String userId)
        + void saveMyGroup(MyGroup myGroup)
        + void deleteMyGroupUser(Long myGroupId, String userId)
      }
    }
    
    package out.entity {
      class MyGroupEntity {
        - Long myGroupId 
        - String myGroupName
        - String subId
        - String leaderId
        - Set<String> memberIds
        - String bankName
        - String bankAccount
        - int paymentDay
        - String inviteCode
        + MyGroup toDomain()
        + static MyGroupEntity fromDomain(MyGroup myGroup)
      }
    }
    
    package dto {
      class MyGroupCreateDTO {
        - String myGroupName
        - Long subId
        - String leaderId
        - String bankName
        - String bankAccount 
        - int paymentDay
      }
      
      class MyGroupJoinDTO {
        - String inviteCode
      }
    }
    
    package exception {
      class InfraException extends RuntimeException {
        - int code
        + InfraException(String message)
        + InfraException(String message, Throwable cause)  
        + InfraException(int code, String message)
        + InfraException(int code, String message, Throwable cause)
        + int getCode()
      }
    }
  }
}
@enduml
============================================

총 구독액과 최대 절감액에 대한 API가 없어. 추가해줘.

==========


